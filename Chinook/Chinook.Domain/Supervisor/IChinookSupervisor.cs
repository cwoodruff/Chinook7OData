using Chinook.Domain.Entities;

namespace Chinook.Domain.Supervisor;

public interface IChinookSupervisor
{
    Task<List<Album>> GetAllAlbum();
    Task<Album?> GetAlbumById(int id);
    Task<List<Album>> GetAlbumByArtistId(int id);
    Task<Album> AddAlbum(Album newAlbum);
    Task<bool> UpdateAlbum(Album album);
    Task<bool> DeleteAlbum(int id);
    Task<List<Artist>> GetAllArtist();
    Task<Artist> GetArtistById(int id);
    Task<Artist> AddArtist(Artist newArtist);
    Task<bool> UpdateArtist(Artist artist);
    Task<bool> DeleteArtist(int id);
    Task<List<Customer>> GetAllCustomer();
    Task<Customer> GetCustomerById(int id);
    Task<List<Customer>> GetCustomerBySupportRepId(int id);
    Task<Customer> AddCustomer(Customer newCustomer);
    Task<bool> UpdateCustomer(Customer customer);
    Task<bool> DeleteCustomer(int id);
    Task<List<Employee>> GetAllEmployee();
    Task<Employee?> GetEmployeeById(int id);
    Task<Employee?> GetEmployeeReportsTo(int id);
    Task<Employee> AddEmployee(Employee newEmployee);
    Task<bool> UpdateEmployee(Employee employee);
    Task<bool> DeleteEmployee(int id);
    Task<IEnumerable<Employee>> GetEmployeeDirectReports(int id);
    Task<IEnumerable<Employee>> GetDirectReports(int id);
    Task<List<Genre>> GetAllGenre();
    Task<Genre?> GetGenreById(int id);
    Task<Genre> AddGenre(Genre newGenre);
    Task<bool> UpdateGenre(Genre genre);
    Task<bool> DeleteGenre(int id);
    Task<List<InvoiceLine>> GetAllInvoiceLine();
    Task<InvoiceLine> GetInvoiceLineById(int id);
    Task<List<InvoiceLine>> GetInvoiceLineByInvoiceId(int id);
    Task<List<InvoiceLine>> GetInvoiceLineByTrackId(int id);
    Task<InvoiceLine> AddInvoiceLine(InvoiceLine newInvoiceLine);
    Task<bool> UpdateInvoiceLine(InvoiceLine invoiceLine);
    Task<bool> DeleteInvoiceLine(int id);
    Task<List<Invoice>> GetAllInvoice();
    Task<Invoice?> GetInvoiceById(int id);
    Task<List<Invoice>> GetInvoiceByCustomerId(int id);
    Task<Invoice> AddInvoice(Invoice newInvoice);
    Task<bool> UpdateInvoice(Invoice invoice);
    Task<bool> DeleteInvoice(int id);
    Task<List<Invoice>> GetInvoiceByEmployeeId(int id);
    Task<List<MediaType>> GetAllMediaType();
    Task<MediaType?> GetMediaTypeById(int id);
    Task<MediaType> AddMediaType(MediaType newMediaType);
    Task<bool> UpdateMediaType(MediaType mediaType);
    Task<bool> DeleteMediaType(int id);
    Task<List<Playlist>> GetAllPlaylist();
    Task<Playlist> GetPlaylistById(int id);
    Task<Playlist> AddPlaylist(Playlist newPlaylist);
    Task<bool> UpdatePlaylist(Playlist playlist);
    Task<bool> DeletePlaylist(int id);
    Task<List<Track>> GetAllTrack();
    Task<Track?> GetTrackById(int id);
    Task<List<Track>?> GetTrackByAlbumId(int id);
    Task<List<Track>> GetTrackByGenreId(int id);
    Task<List<Track>> GetTrackByMediaTypeId(int id);
    Task<List<Track>> GetTrackByPlaylistId(int id);
    Task<Track> AddTrack(Track newTrack);
    Task<bool> UpdateTrack(Track track);
    Task<bool> DeleteTrack(int id);
    Task<List<Track>> GetTrackByArtistId(int id);
    Task<List<Track>> GetTrackByInvoiceId(int id);
}